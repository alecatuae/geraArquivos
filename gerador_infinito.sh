#!/bin/bash

# =============================================================================
# Gerador Infinito de Arquivos - Teste de Storage
# =============================================================================
# 
# Prop√≥sito: Executar gera√ß√£o de arquivos em loop infinito para:
# - Popular storage com dados de teste
# - Validar taxa de efici√™ncia
# - Testar deduplica√ß√£o e compress√£o
# - Simular carga de trabalho cont√≠nua
#
# Uso: ./gerador_infinito.sh
# =============================================================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_PATH="$SCRIPT_DIR/venv"
LOG_FILE="$SCRIPT_DIR/gerador_infinito.log"
STATS_FILE="$SCRIPT_DIR/estatisticas.txt"
PASTA_DESTINO="storage_teste"
QUANTIDADE_ARQUIVOS=100
TEMPLATE="equilibrado"

# Contadores
ITERACAO=0
TOTAL_ARQUIVOS=0
TOTAL_MB=0
INICIO_EXECUCAO=$(date +%s)

# Fun√ß√£o para log com timestamp
log() {
    local mensagem="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] $mensagem" | tee -a "$LOG_FILE"
}

# Fun√ß√£o para calcular estat√≠sticas
calcular_estatisticas() {
    local pasta="$1"
    local arquivos=$(find "$pasta" -type f 2>/dev/null | wc -l)
    local tamanho_mb=$(du -sm "$pasta" 2>/dev/null | cut -f1)
    echo "$arquivos,$tamanho_mb"
}

# Fun√ß√£o para exibir estat√≠sticas
exibir_estatisticas() {
    local tempo_atual=$(date +%s)
    local tempo_decorrido=$((tempo_atual - INICIO_EXECUCAO))
    local horas=$((tempo_decorrido / 3600))
    local minutos=$(((tempo_decorrido % 3600) / 60))
    local segundos=$((tempo_decorrido % 60))
    
    local stats=$(calcular_estatisticas "$PASTA_DESTINO")
    local arquivos=$(echo "$stats" | cut -d',' -f1)
    local tamanho_mb=$(echo "$stats" | cut -d',' -f2)
    
    echo -e "\n${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                    ESTAT√çSTICAS DO GERADOR                    ‚ïë${NC}"
    echo -e "${CYAN}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
    echo -e "${CYAN}‚ïë${NC} Itera√ß√£o: ${GREEN}$ITERACAO${NC}"
    echo -e "${CYAN}‚ïë${NC} Tempo de execu√ß√£o: ${GREEN}${horas}h ${minutos}m ${segundos}s${NC}"
    echo -e "${CYAN}‚ïë${NC} Total de arquivos: ${GREEN}$arquivos${NC}"
    echo -e "${CYAN}‚ïë${NC} Tamanho total: ${GREEN}${tamanho_mb} MB${NC}"
    echo -e "${CYAN}‚ïë${NC} Pasta: ${GREEN}$PASTA_DESTINO${NC}"
    echo -e "${CYAN}‚ïë${NC} Template: ${GREEN}$TEMPLATE${NC}"
    echo -e "${CYAN}‚ïë${NC} Arquivos por itera√ß√£o: ${GREEN}$QUANTIDADE_ARQUIVOS${NC}"
    
    if [ $ITERACAO -gt 0 ]; then
        local media_arquivos=$((arquivos / ITERACAO))
        local media_mb=$((tamanho_mb / ITERACAO))
        echo -e "${CYAN}‚ïë${NC} M√©dia por itera√ß√£o: ${GREEN}${media_arquivos} arquivos, ${media_mb} MB${NC}"
    fi
    
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}\n"
}

# Fun√ß√£o para salvar estat√≠sticas em arquivo
salvar_estatisticas() {
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local stats=$(calcular_estatisticas "$PASTA_DESTINO")
    local arquivos=$(echo "$stats" | cut -d',' -f1)
    local tamanho_mb=$(echo "$stats" | cut -d',' -f2)
    
    echo "$timestamp,$ITERACAO,$arquivos,$tamanho_mb" >> "$STATS_FILE"
}

# Fun√ß√£o para verificar espa√ßo em disco
verificar_espaco() {
    local espaco_disponivel=$(df "$PASTA_DESTINO" 2>/dev/null | tail -1 | awk '{print $4}')
    local espaco_mb=$((espaco_disponivel / 1024))
    
    if [ $espaco_mb -lt 1000 ]; then
        log "${RED}‚ö†Ô∏è  ATEN√á√ÉO: Menos de 1GB de espa√ßo dispon√≠vel!${NC}"
        log "${YELLOW}Espa√ßo restante: ${espaco_mb} MB${NC}"
    fi
}

# Fun√ß√£o para limpar arquivos antigos (opcional)
limpar_arquivos_antigos() {
    if [ $ITERACAO -gt 0 ] && [ $((ITERACAO % 10)) -eq 0 ]; then
        log "${YELLOW}üßπ Limpeza autom√°tica (itera√ß√£o $ITERACAO)${NC}"
        # Manter apenas os √∫ltimos 1000 arquivos
        find "$PASTA_DESTINO" -type f -name "*.txt" -o -name "*.pdf" -o -name "*.docx" -o -name "*.xlsx" -o -name "*.jpeg" -o -name "*.png" | \
        sort -r | tail -n +1001 | xargs rm -f 2>/dev/null
        log "${GREEN}‚úÖ Limpeza conclu√≠da${NC}"
    fi
}

# Fun√ß√£o para capturar sinais de interrup√ß√£o
cleanup() {
    echo -e "\n${YELLOW}üõë Interrompendo gerador...${NC}"
    log "${YELLOW}üõë Gerador interrompido pelo usu√°rio${NC}"
    exibir_estatisticas
    log "${GREEN}üìä Estat√≠sticas finais salvas em: $STATS_FILE${NC}"
    exit 0
}

# Configurar captura de sinais
trap cleanup SIGINT SIGTERM

# =============================================================================
# IN√çCIO DO SCRIPT
# =============================================================================

echo -e "${BLUE}üöÄ Iniciando Gerador Infinito de Arquivos${NC}"
echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "geraArquivos.py" ]; then
    echo -e "${RED}‚ùå Erro: geraArquivos.py n√£o encontrado!${NC}"
    echo -e "${YELLOW}Execute este script no diret√≥rio do projeto geraArquivos${NC}"
    exit 1
fi

# Verificar se o ambiente virtual existe
if [ ! -d "$VENV_PATH" ]; then
    echo -e "${RED}‚ùå Erro: Ambiente virtual n√£o encontrado!${NC}"
    echo -e "${YELLOW}Execute primeiro: python -m venv venv${NC}"
    exit 1
fi

# Ativar ambiente virtual
echo -e "${YELLOW}üîß Ativando ambiente virtual...${NC}"
source "$VENV_PATH/bin/activate"

# Verificar se o m√≥dulo funciona
echo -e "${YELLOW}üß™ Testando m√≥dulo geraArquivos...${NC}"
if ! python -c "from geraArquivos import gerar" 2>/dev/null; then
    echo -e "${RED}‚ùå Erro: M√≥dulo geraArquivos n√£o funciona!${NC}"
    echo -e "${YELLOW}Verifique se todas as depend√™ncias est√£o instaladas${NC}"
    exit 1
fi

# Criar pasta de destino
mkdir -p "$PASTA_DESTINO"

# Inicializar arquivos de log
echo "timestamp,iteracao,arquivos,tamanho_mb" > "$STATS_FILE"
log "${GREEN}‚úÖ Gerador iniciado com sucesso!${NC}"
log "${BLUE}üìÅ Pasta de destino: $PASTA_DESTINO${NC}"
log "${BLUE}üìä Template: $TEMPLATE${NC}"
log "${BLUE}üì¶ Arquivos por itera√ß√£o: $QUANTIDADE_ARQUIVOS${NC}"
log "${BLUE}üìù Log: $LOG_FILE${NC}"
log "${BLUE}üìà Estat√≠sticas: $STATS_FILE${NC}"

# Exibir estat√≠sticas iniciais
exibir_estatisticas

# =============================================================================
# LOOP INFINITO
# =============================================================================

while true; do
    ITERACAO=$((ITERACAO + 1))
    
    echo -e "${PURPLE}üîÑ Itera√ß√£o $ITERACAO iniciada...${NC}"
    log "${PURPLE}üîÑ Iniciando itera√ß√£o $ITERACAO${NC}"
    
    # Verificar espa√ßo em disco
    verificar_espaco
    
    # Executar gera√ß√£o de arquivos
    echo -e "${YELLOW}üì¶ Gerando $QUANTIDADE_ARQUIVOS arquivos...${NC}"
    
    if python -c "from geraArquivos import gerar; gerar($QUANTIDADE_ARQUIVOS, '$TEMPLATE', '$PASTA_DESTINO')" 2>>"$LOG_FILE"; then
        echo -e "${GREEN}‚úÖ Itera√ß√£o $ITERACAO conclu√≠da com sucesso!${NC}"
        log "${GREEN}‚úÖ Itera√ß√£o $ITERACAO conclu√≠da${NC}"
    else
        echo -e "${RED}‚ùå Erro na itera√ß√£o $ITERACAO!${NC}"
        log "${RED}‚ùå Erro na itera√ß√£o $ITERACAO${NC}"
        echo -e "${YELLOW}üîÑ Tentando novamente em 5 segundos...${NC}"
        sleep 5
        continue
    fi
    
    # Atualizar contadores
    TOTAL_ARQUIVOS=$((TOTAL_ARQUIVOS + QUANTIDADE_ARQUIVOS))
    
    # Salvar estat√≠sticas
    salvar_estatisticas
    
    # Exibir estat√≠sticas a cada 5 itera√ß√µes
    if [ $((ITERACAO % 5)) -eq 0 ]; then
        exibir_estatisticas
    fi
    
    # Limpeza autom√°tica (opcional)
    limpar_arquivos_antigos
    
    # Pausa entre itera√ß√µes (opcional)
    echo -e "${BLUE}‚è≥ Aguardando 2 segundos antes da pr√≥xima itera√ß√£o...${NC}"
    sleep 2
done
